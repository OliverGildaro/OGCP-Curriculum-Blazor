@page "/"
@rendermode InteractiveServer

<div class="container" style="display:flex; padding-top:20px;">
    <h4>Profiles</h4>
    @foreach (var Current in profiles)
    {
        <div class="col">
            <span>@Current.GivenName</span>
        </div>
    }
</div>
<ButtonCmp
    HtmlId="1h1h1"
    TypeBtn="submit"
    Label="Create new"
    HandleClick="HandleCreate"
    CssClass="btn-primary" />

<p>
    <code>GivenName</code>: @ProfileToCreate.GivenName
    <code>FamilyName</code>: @ProfileToCreate.FamilyNames
</p>

<Form OnSubmit="HandleCheckoutSubmit">
    <InputField HtmlId="givenName"
                Label="Given Name"
                Name="givenName"
                Placeholder="Enter your given name"
                FormClass="form-control"
                ValueChanged = "value => ValidateField(nameof(ProfileToCreate.GivenName), value)"
                FeedbackClass="@Errors.GetFeedbackClass(nameof(ProfileToCreate.GivenName))"
                Feedback="@Errors.GetMessage(nameof(ProfileToCreate.GivenName))" />
    <InputField HtmlId="familyNames"
                Label="Family Names"
                Name="familyNames"
                Placeholder="Enter your family names"
                FormClass="form-control"
                ValueChanged="value => ValidateField(nameof(ProfileToCreate.FamilyNames), value)"
                FeedbackClass="@Errors.GetFeedbackClass(nameof(ProfileToCreate.FamilyNames))"
                Feedback="@Errors.GetMessage(nameof(ProfileToCreate.FamilyNames))" />
</Form>

@code {
    private async Task HandleCheckoutSubmit(EventArgs e)
    {
        // Simula un proceso de envío
        await Task.Delay(1000);
        // Lanza una excepción para probar el manejo de errores (opcional)
        // throw new Exception("Error al guardar los datos.");
    }
}
